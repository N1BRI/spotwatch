// Mocks generated by Mockito 5.4.4 from annotations
// in spotwatch/test/services/reverse_beacon_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:reverse_beacon/src/reverse_beacon_base.dart' as _i3;
import 'package:reverse_beacon/src/spot.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStreamSubscription_0<T> extends _i1.SmartFake
    implements _i2.StreamSubscription<T> {
  _FakeStreamSubscription_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ReverseBeacon].
///
/// See the documentation for Mockito's code generation for more information.
class MockReverseBeacon extends _i1.Mock implements _i3.ReverseBeacon {
  MockReverseBeacon() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<void> connect({required dynamic callsign}) => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
          {#callsign: callsign},
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.StreamSubscription<_i4.Spot> listen(
          dynamic Function(_i4.Spot)? onListen) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [onListen],
        ),
        returnValue: _FakeStreamSubscription_0<_i4.Spot>(
          this,
          Invocation.method(
            #listen,
            [onListen],
          ),
        ),
      ) as _i2.StreamSubscription<_i4.Spot>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ReverseBeacon].
///
/// See the documentation for Mockito's code generation for more information.
class MockRBeacon extends _i1.Mock implements _i3.ReverseBeacon {
  @override
  _i2.Future<void> connect({required dynamic callsign}) => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
          {#callsign: callsign},
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.StreamSubscription<_i4.Spot> listen(
          dynamic Function(_i4.Spot)? onListen) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [onListen],
        ),
        returnValue: _FakeStreamSubscription_0<_i4.Spot>(
          this,
          Invocation.method(
            #listen,
            [onListen],
          ),
        ),
        returnValueForMissingStub: _FakeStreamSubscription_0<_i4.Spot>(
          this,
          Invocation.method(
            #listen,
            [onListen],
          ),
        ),
      ) as _i2.StreamSubscription<_i4.Spot>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
